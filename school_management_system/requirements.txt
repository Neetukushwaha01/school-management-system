absl-py==1.4.0
anyio==3.3.1
argon2-cffi==21.1.0
asgiref==3.4.1
attrs==21.2.0
Babel==2.9.1
backcall==0.2.0
backports.entry-points-selectable==1.1.0
bleach==4.1.0
certifi==2021.5.30
cffi==1.14.6
charset-normalizer==2.0.6
colorama==0.4.4
comtypes==1.1.10
contourpy==1.0.7
cycler==0.11.0
debugpy==1.4.3
decorator==5.1.0
defusedxml==0.7.1
distlib==0.3.3
Django==3.2.9
django-qrcode==0.3
djangorestframework==3.12.4
djangorestframework-simplejwt==5.0.0
entrypoints==0.3
environ==1.0
environment==1.0.0
et-xmlfile==1.1.0
filelock==3.3.1
flatbuffers==23.1.21
fonttools==4.38.0
idna==3.2
importlib-resources==5.10.2
ipykernel==6.4.1
ipython==7.27.0
ipython-genutils==0.2.0
ipywidgets==7.6.5
jedi==0.18.0
Jinja2==3.0.1
json5==0.9.6
jsonschema==3.2.0
jupyter==1.0.0
jupyter-client==7.0.3
jupyter-console==6.4.0
jupyter-core==4.8.1
jupyter-server==1.11.0
jupyterlab==3.1.13
jupyterlab-pygments==0.1.2
jupyterlab-server==2.8.1
jupyterlab-widgets==1.0.2
kiwisolver==1.4.4
MarkupSafe==2.0.1
matplotlib==3.7.0
matplotlib-inline==0.1.3
mediapipe==0.9.1.0
mistune==0.8.4
mysql==0.0.3
mysqlclient==2.0.3
nbclassic==0.3.2
nbclient==0.5.4
nbconvert==6.1.0
nbformat==5.1.3
nest-asyncio==1.5.1
notebook==6.4.4
numpy==1.21.2
opencv-contrib-python==4.7.0.68
openpyxl==3.0.10
packaging==21.0
pandas==1.3.3
pandocfilters==1.5.0
parso==0.8.2
pickleshare==0.7.5
Pillow==8.3.2
pip==21.1.1
platformdirs==2.4.0
prometheus-client==0.11.0
prompt-toolkit==3.0.20
protobuf==3.20.3
pycparser==2.20
Pygments==2.10.0
PyJWT==2.3.0
PyMySQL==1.0.2
pyparsing==2.4.7
pypiwin32==223
pyrsistent==0.18.0
python-dateutil==2.8.2
pyttsx3==2.90
pytz==2021.3
pywin32==301
pywinpty==1.1.4
pyzmq==22.3.0
qrcode==7.3.1
qtconsole==5.1.1
QtPy==1.11.2
requests==2.26.0
requests-unixsocket==0.2.0
Send2Trash==1.8.0
setuptools==56.0.0
six==1.16.0
sniffio==1.2.0
sqlparse==0.4.2
terminado==0.12.1
testpath==0.5.0
tornado==6.1
traitlets==5.1.0
urllib3==1.26.7
virtualenv==20.8.1
wcwidth==0.2.5
webencodings==0.5.1
websocket-client==1.2.1
widgetsnbextension==3.5.1
zipp==3.13.0


documentary on project
Introduction:
A school management system is an application designed to manage the school's day-to-day administrative tasks, such as student information management, attendance management, fee management, and other related tasks. In this project, we will build a basic school management system using Django Rest Framework (DRF). DRF is a powerful and flexible toolkit for building Web APIs, which makes it easier to build APIs quickly and efficiently.

Requirements:

Python 3.x
Django 3.x
Django Rest Framework (DRF)
PostgreSQL
Project Setup:

Create a new Django project using the command:
django-admin startproject school_management_system
Create a new Django app named "schools" using the command:
python manage.py startapp schools
Install DRF using the command: pip install djangorestframework
Create a new PostgreSQL database named "school_management_system".
Database Design:
We need two models for this project: School and Student.

The School model will have the following fields:

Name
Email
City
Pin Code
Password
The Student model will have the following fields:

Name
Username
Password
Grade (1-12)
School (Foreign Key to School model)
API Endpoints:

School Signup:

Endpoint: /api/v1/schools/signup/
Method: POST
Request Body:
perl
Copy code
{
    "name": "School Name",
    "email": "school@email.com",
    "city": "City",
    "pin_code": "123456",
    "password": "school_password"
}
Response Body:
perl
Copy code
{
    "school": {
        "id": 1,
        "name": "School Name",
        "email": "school@email.com",
        "city": "City",
        "pin_code": "123456"
    },
    "token": "<jwt_token>"
}
Student Bulk Creation:

Endpoint: /api/v1/students/bulk_create/
Method: POST
Request Body:
json
Copy code
{
    "students": [
        {
            "name": "Student Name 1",
            "username": "student1",
            "password": "student1_password",
            "grade": 8
        },
        {
            "name": "",
            "username": "student2",
            "password": "student2_password",
            "grade": 8
        },
        {
            "name": "Student Name 3",
            "username": "student3",
            "password": "student3_password",
            "grade": 9
        },
        {
            "name": "Student Name 4",
            "username": "student4",
            "password": "student4_password",
            "grade": 10
        }
    ]
}
Response Body:
json
Copy code
{
    "success": true
}
Login:

Endpoint: /api/v1/auth/login/
Method: POST
Request Body:
json
Copy code
{
    "username": "school_username_or_student_username",
    "password": "password"
}
Response Body:
json
Copy code
{
    "token": "<jwt_token>"
}
List and Filter Students:

Endpoint: /api/v1/students/
Method: GET
Query Parameters:
grade: Filter students by grade. (Optional)
school: Filter students by school. (Optional)
Response Body: